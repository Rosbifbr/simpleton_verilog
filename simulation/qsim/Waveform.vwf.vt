// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/19/2024 13:52:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    simpleton_pitanga
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module simpleton_pitanga_vlg_sample_tst(
	clk,
	rst,
	sampler_tx
);
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module simpleton_pitanga_vlg_check_tst (
	OutAC,
	OutPC,
	OutREM,
	oEA,
	oEndMem_7s,
	oEndMem_MS,
	oMem128_7s,
	resultado,
	sampler_rx
);
input [7:0] OutAC;
input [7:0] OutPC;
input [7:0] OutREM;
input [2:0] oEA;
input [6:0] oEndMem_7s;
input  oEndMem_MS;
input [6:0] oMem128_7s;
input [7:0] resultado;
input sampler_rx;

reg [7:0] OutAC_expected;
reg [7:0] OutPC_expected;
reg [7:0] OutREM_expected;
reg [2:0] oEA_expected;
reg [6:0] oEndMem_7s_expected;
reg  oEndMem_MS_expected;
reg [6:0] oMem128_7s_expected;
reg [7:0] resultado_expected;

reg [7:0] OutAC_prev;
reg [7:0] OutPC_prev;
reg [7:0] OutREM_prev;
reg [2:0] oEA_prev;
reg [6:0] oEndMem_7s_prev;
reg  oEndMem_MS_prev;
reg [6:0] oMem128_7s_prev;
reg [7:0] resultado_prev;

reg [7:0] OutPC_expected_prev;
reg [2:0] oEA_expected_prev;
reg [6:0] oEndMem_7s_expected_prev;
reg  oEndMem_MS_expected_prev;
reg [6:0] oMem128_7s_expected_prev;

reg [7:0] last_OutPC_exp;
reg [2:0] last_oEA_exp;
reg [6:0] last_oEndMem_7s_exp;
reg  last_oEndMem_MS_exp;
reg [6:0] last_oMem128_7s_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	OutAC_prev = OutAC;
	OutPC_prev = OutPC;
	OutREM_prev = OutREM;
	oEA_prev = oEA;
	oEndMem_7s_prev = oEndMem_7s;
	oEndMem_MS_prev = oEndMem_MS;
	oMem128_7s_prev = oMem128_7s;
	resultado_prev = resultado;
end

// update expected /o prevs

always @(trigger)
begin
	OutPC_expected_prev = OutPC_expected;
	oEA_expected_prev = oEA_expected;
	oEndMem_7s_expected_prev = oEndMem_7s_expected;
	oEndMem_MS_expected_prev = oEndMem_MS_expected;
	oMem128_7s_expected_prev = oMem128_7s_expected;
end


// expected oEA[ 2 ]
initial
begin
	oEA_expected[2] = 1'bX;
end 
// expected oEA[ 1 ]
initial
begin
	oEA_expected[1] = 1'bX;
end 
// expected oEA[ 0 ]
initial
begin
	oEA_expected[0] = 1'bX;
end 

// expected oEndMem_MS
initial
begin
	oEndMem_MS_expected = 1'bX;
end 
// expected oEndMem_7s[ 6 ]
initial
begin
	oEndMem_7s_expected[6] = 1'bX;
end 
// expected oEndMem_7s[ 5 ]
initial
begin
	oEndMem_7s_expected[5] = 1'bX;
end 
// expected oEndMem_7s[ 4 ]
initial
begin
	oEndMem_7s_expected[4] = 1'bX;
end 
// expected oEndMem_7s[ 3 ]
initial
begin
	oEndMem_7s_expected[3] = 1'bX;
end 
// expected oEndMem_7s[ 2 ]
initial
begin
	oEndMem_7s_expected[2] = 1'bX;
end 
// expected oEndMem_7s[ 1 ]
initial
begin
	oEndMem_7s_expected[1] = 1'bX;
end 
// expected oEndMem_7s[ 0 ]
initial
begin
	oEndMem_7s_expected[0] = 1'bX;
end 
// expected oMem128_7s[ 6 ]
initial
begin
	oMem128_7s_expected[6] = 1'bX;
end 
// expected oMem128_7s[ 5 ]
initial
begin
	oMem128_7s_expected[5] = 1'bX;
end 
// expected oMem128_7s[ 4 ]
initial
begin
	oMem128_7s_expected[4] = 1'bX;
end 
// expected oMem128_7s[ 3 ]
initial
begin
	oMem128_7s_expected[3] = 1'bX;
end 
// expected oMem128_7s[ 2 ]
initial
begin
	oMem128_7s_expected[2] = 1'bX;
end 
// expected oMem128_7s[ 1 ]
initial
begin
	oMem128_7s_expected[1] = 1'bX;
end 
// expected oMem128_7s[ 0 ]
initial
begin
	oMem128_7s_expected[0] = 1'bX;
end 
// expected OutPC[ 7 ]
initial
begin
	OutPC_expected[7] = 1'bX;
end 
// expected OutPC[ 6 ]
initial
begin
	OutPC_expected[6] = 1'bX;
end 
// expected OutPC[ 5 ]
initial
begin
	OutPC_expected[5] = 1'bX;
end 
// expected OutPC[ 4 ]
initial
begin
	OutPC_expected[4] = 1'bX;
end 
// expected OutPC[ 3 ]
initial
begin
	OutPC_expected[3] = 1'bX;
end 
// expected OutPC[ 2 ]
initial
begin
	OutPC_expected[2] = 1'bX;
end 
// expected OutPC[ 1 ]
initial
begin
	OutPC_expected[1] = 1'bX;
end 
// expected OutPC[ 0 ]
initial
begin
	OutPC_expected[0] = 1'bX;
end 
// generate trigger
always @(OutAC_expected or OutAC or OutPC_expected or OutPC or OutREM_expected or OutREM or oEA_expected or oEA or oEndMem_7s_expected or oEndMem_7s or oEndMem_MS_expected or oEndMem_MS or oMem128_7s_expected or oMem128_7s or resultado_expected or resultado)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OutAC = %b | expected OutPC = %b | expected OutREM = %b | expected oEA = %b | expected oEndMem_7s = %b | expected oEndMem_MS = %b | expected oMem128_7s = %b | expected resultado = %b | ",OutAC_expected_prev,OutPC_expected_prev,OutREM_expected_prev,oEA_expected_prev,oEndMem_7s_expected_prev,oEndMem_MS_expected_prev,oMem128_7s_expected_prev,resultado_expected_prev);
	$display("| real OutAC = %b | real OutPC = %b | real OutREM = %b | real oEA = %b | real oEndMem_7s = %b | real oEndMem_MS = %b | real oMem128_7s = %b | real resultado = %b | ",OutAC_prev,OutPC_prev,OutREM_prev,oEA_prev,oEndMem_7s_prev,oEndMem_MS_prev,oMem128_7s_prev,resultado_prev);
`endif
	if (
		( OutPC_expected_prev[0] !== 1'bx ) && ( OutPC_prev[0] !== OutPC_expected_prev[0] )
		&& ((OutPC_expected_prev[0] !== last_OutPC_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutPC_expected_prev);
		$display ("     Real value = %b", OutPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutPC_exp[0] = OutPC_expected_prev[0];
	end
	if (
		( OutPC_expected_prev[1] !== 1'bx ) && ( OutPC_prev[1] !== OutPC_expected_prev[1] )
		&& ((OutPC_expected_prev[1] !== last_OutPC_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutPC_expected_prev);
		$display ("     Real value = %b", OutPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutPC_exp[1] = OutPC_expected_prev[1];
	end
	if (
		( OutPC_expected_prev[2] !== 1'bx ) && ( OutPC_prev[2] !== OutPC_expected_prev[2] )
		&& ((OutPC_expected_prev[2] !== last_OutPC_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutPC_expected_prev);
		$display ("     Real value = %b", OutPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutPC_exp[2] = OutPC_expected_prev[2];
	end
	if (
		( OutPC_expected_prev[3] !== 1'bx ) && ( OutPC_prev[3] !== OutPC_expected_prev[3] )
		&& ((OutPC_expected_prev[3] !== last_OutPC_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutPC_expected_prev);
		$display ("     Real value = %b", OutPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutPC_exp[3] = OutPC_expected_prev[3];
	end
	if (
		( OutPC_expected_prev[4] !== 1'bx ) && ( OutPC_prev[4] !== OutPC_expected_prev[4] )
		&& ((OutPC_expected_prev[4] !== last_OutPC_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutPC_expected_prev);
		$display ("     Real value = %b", OutPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutPC_exp[4] = OutPC_expected_prev[4];
	end
	if (
		( OutPC_expected_prev[5] !== 1'bx ) && ( OutPC_prev[5] !== OutPC_expected_prev[5] )
		&& ((OutPC_expected_prev[5] !== last_OutPC_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutPC_expected_prev);
		$display ("     Real value = %b", OutPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutPC_exp[5] = OutPC_expected_prev[5];
	end
	if (
		( OutPC_expected_prev[6] !== 1'bx ) && ( OutPC_prev[6] !== OutPC_expected_prev[6] )
		&& ((OutPC_expected_prev[6] !== last_OutPC_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutPC_expected_prev);
		$display ("     Real value = %b", OutPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutPC_exp[6] = OutPC_expected_prev[6];
	end
	if (
		( OutPC_expected_prev[7] !== 1'bx ) && ( OutPC_prev[7] !== OutPC_expected_prev[7] )
		&& ((OutPC_expected_prev[7] !== last_OutPC_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutPC_expected_prev);
		$display ("     Real value = %b", OutPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutPC_exp[7] = OutPC_expected_prev[7];
	end
	if (
		( oEA_expected_prev[0] !== 1'bx ) && ( oEA_prev[0] !== oEA_expected_prev[0] )
		&& ((oEA_expected_prev[0] !== last_oEA_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oEA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oEA_expected_prev);
		$display ("     Real value = %b", oEA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oEA_exp[0] = oEA_expected_prev[0];
	end
	if (
		( oEA_expected_prev[1] !== 1'bx ) && ( oEA_prev[1] !== oEA_expected_prev[1] )
		&& ((oEA_expected_prev[1] !== last_oEA_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oEA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oEA_expected_prev);
		$display ("     Real value = %b", oEA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oEA_exp[1] = oEA_expected_prev[1];
	end
	if (
		( oEA_expected_prev[2] !== 1'bx ) && ( oEA_prev[2] !== oEA_expected_prev[2] )
		&& ((oEA_expected_prev[2] !== last_oEA_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oEA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oEA_expected_prev);
		$display ("     Real value = %b", oEA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oEA_exp[2] = oEA_expected_prev[2];
	end
	if (
		( oEndMem_7s_expected_prev[0] !== 1'bx ) && ( oEndMem_7s_prev[0] !== oEndMem_7s_expected_prev[0] )
		&& ((oEndMem_7s_expected_prev[0] !== last_oEndMem_7s_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oEndMem_7s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oEndMem_7s_expected_prev);
		$display ("     Real value = %b", oEndMem_7s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oEndMem_7s_exp[0] = oEndMem_7s_expected_prev[0];
	end
	if (
		( oEndMem_7s_expected_prev[1] !== 1'bx ) && ( oEndMem_7s_prev[1] !== oEndMem_7s_expected_prev[1] )
		&& ((oEndMem_7s_expected_prev[1] !== last_oEndMem_7s_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oEndMem_7s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oEndMem_7s_expected_prev);
		$display ("     Real value = %b", oEndMem_7s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oEndMem_7s_exp[1] = oEndMem_7s_expected_prev[1];
	end
	if (
		( oEndMem_7s_expected_prev[2] !== 1'bx ) && ( oEndMem_7s_prev[2] !== oEndMem_7s_expected_prev[2] )
		&& ((oEndMem_7s_expected_prev[2] !== last_oEndMem_7s_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oEndMem_7s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oEndMem_7s_expected_prev);
		$display ("     Real value = %b", oEndMem_7s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oEndMem_7s_exp[2] = oEndMem_7s_expected_prev[2];
	end
	if (
		( oEndMem_7s_expected_prev[3] !== 1'bx ) && ( oEndMem_7s_prev[3] !== oEndMem_7s_expected_prev[3] )
		&& ((oEndMem_7s_expected_prev[3] !== last_oEndMem_7s_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oEndMem_7s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oEndMem_7s_expected_prev);
		$display ("     Real value = %b", oEndMem_7s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oEndMem_7s_exp[3] = oEndMem_7s_expected_prev[3];
	end
	if (
		( oEndMem_7s_expected_prev[4] !== 1'bx ) && ( oEndMem_7s_prev[4] !== oEndMem_7s_expected_prev[4] )
		&& ((oEndMem_7s_expected_prev[4] !== last_oEndMem_7s_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oEndMem_7s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oEndMem_7s_expected_prev);
		$display ("     Real value = %b", oEndMem_7s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oEndMem_7s_exp[4] = oEndMem_7s_expected_prev[4];
	end
	if (
		( oEndMem_7s_expected_prev[5] !== 1'bx ) && ( oEndMem_7s_prev[5] !== oEndMem_7s_expected_prev[5] )
		&& ((oEndMem_7s_expected_prev[5] !== last_oEndMem_7s_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oEndMem_7s[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oEndMem_7s_expected_prev);
		$display ("     Real value = %b", oEndMem_7s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oEndMem_7s_exp[5] = oEndMem_7s_expected_prev[5];
	end
	if (
		( oEndMem_7s_expected_prev[6] !== 1'bx ) && ( oEndMem_7s_prev[6] !== oEndMem_7s_expected_prev[6] )
		&& ((oEndMem_7s_expected_prev[6] !== last_oEndMem_7s_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oEndMem_7s[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oEndMem_7s_expected_prev);
		$display ("     Real value = %b", oEndMem_7s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oEndMem_7s_exp[6] = oEndMem_7s_expected_prev[6];
	end
	if (
		( oEndMem_MS_expected_prev !== 1'bx ) && ( oEndMem_MS_prev !== oEndMem_MS_expected_prev )
		&& ((oEndMem_MS_expected_prev !== last_oEndMem_MS_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oEndMem_MS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oEndMem_MS_expected_prev);
		$display ("     Real value = %b", oEndMem_MS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_oEndMem_MS_exp = oEndMem_MS_expected_prev;
	end
	if (
		( oMem128_7s_expected_prev[0] !== 1'bx ) && ( oMem128_7s_prev[0] !== oMem128_7s_expected_prev[0] )
		&& ((oMem128_7s_expected_prev[0] !== last_oMem128_7s_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oMem128_7s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oMem128_7s_expected_prev);
		$display ("     Real value = %b", oMem128_7s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oMem128_7s_exp[0] = oMem128_7s_expected_prev[0];
	end
	if (
		( oMem128_7s_expected_prev[1] !== 1'bx ) && ( oMem128_7s_prev[1] !== oMem128_7s_expected_prev[1] )
		&& ((oMem128_7s_expected_prev[1] !== last_oMem128_7s_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oMem128_7s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oMem128_7s_expected_prev);
		$display ("     Real value = %b", oMem128_7s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oMem128_7s_exp[1] = oMem128_7s_expected_prev[1];
	end
	if (
		( oMem128_7s_expected_prev[2] !== 1'bx ) && ( oMem128_7s_prev[2] !== oMem128_7s_expected_prev[2] )
		&& ((oMem128_7s_expected_prev[2] !== last_oMem128_7s_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oMem128_7s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oMem128_7s_expected_prev);
		$display ("     Real value = %b", oMem128_7s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oMem128_7s_exp[2] = oMem128_7s_expected_prev[2];
	end
	if (
		( oMem128_7s_expected_prev[3] !== 1'bx ) && ( oMem128_7s_prev[3] !== oMem128_7s_expected_prev[3] )
		&& ((oMem128_7s_expected_prev[3] !== last_oMem128_7s_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oMem128_7s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oMem128_7s_expected_prev);
		$display ("     Real value = %b", oMem128_7s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oMem128_7s_exp[3] = oMem128_7s_expected_prev[3];
	end
	if (
		( oMem128_7s_expected_prev[4] !== 1'bx ) && ( oMem128_7s_prev[4] !== oMem128_7s_expected_prev[4] )
		&& ((oMem128_7s_expected_prev[4] !== last_oMem128_7s_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oMem128_7s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oMem128_7s_expected_prev);
		$display ("     Real value = %b", oMem128_7s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oMem128_7s_exp[4] = oMem128_7s_expected_prev[4];
	end
	if (
		( oMem128_7s_expected_prev[5] !== 1'bx ) && ( oMem128_7s_prev[5] !== oMem128_7s_expected_prev[5] )
		&& ((oMem128_7s_expected_prev[5] !== last_oMem128_7s_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oMem128_7s[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oMem128_7s_expected_prev);
		$display ("     Real value = %b", oMem128_7s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oMem128_7s_exp[5] = oMem128_7s_expected_prev[5];
	end
	if (
		( oMem128_7s_expected_prev[6] !== 1'bx ) && ( oMem128_7s_prev[6] !== oMem128_7s_expected_prev[6] )
		&& ((oMem128_7s_expected_prev[6] !== last_oMem128_7s_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oMem128_7s[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oMem128_7s_expected_prev);
		$display ("     Real value = %b", oMem128_7s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oMem128_7s_exp[6] = oMem128_7s_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module simpleton_pitanga_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
// wires                                               
wire [7:0] OutAC;
wire [7:0] OutPC;
wire [7:0] OutREM;
wire [2:0] oEA;
wire [6:0] oEndMem_7s;
wire oEndMem_MS;
wire [6:0] oMem128_7s;
wire [7:0] resultado;

wire sampler;                             

// assign statements (if any)                          
simpleton_pitanga i1 (
// port map - connection between master ports and signals/registers   
	.OutAC(OutAC),
	.OutPC(OutPC),
	.OutREM(OutREM),
	.clk(clk),
	.oEA(oEA),
	.oEndMem_7s(oEndMem_7s),
	.oEndMem_MS(oEndMem_MS),
	.oMem128_7s(oMem128_7s),
	.resultado(resultado),
	.rst(rst)
);

// rst
initial
begin
	rst = 1'b0;
	rst = #40000 1'b1;
	rst = #40000 1'b0;
end 

// clk
initial
begin
	repeat(16)
	begin
		clk = 1'b0;
		clk = #60000 1'b1;
		# 60000;
	end
	clk = 1'b0;
	clk = #60000 1'b1;
end 

simpleton_pitanga_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

simpleton_pitanga_vlg_check_tst tb_out(
	.OutAC(OutAC),
	.OutPC(OutPC),
	.OutREM(OutREM),
	.oEA(oEA),
	.oEndMem_7s(oEndMem_7s),
	.oEndMem_MS(oEndMem_MS),
	.oMem128_7s(oMem128_7s),
	.resultado(resultado),
	.sampler_rx(sampler)
);
endmodule

